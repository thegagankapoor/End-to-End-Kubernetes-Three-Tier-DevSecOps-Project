pipeline {
    agent any 
    tools {
        nodejs 'nodejs'
    }
    environment  {
        SCANNER_HOME=tool 'sonar-scanner'
        AWS_ACCOUNT_ID = credentials('ACCOUNT_ID')
        AWS_ECR_REPO_NAME = credentials('ECR_REPO2')
        AWS_DEFAULT_REGION = 'us-east-1'
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/"
    }
    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git credentialsId: 'GITHUB', url: 'https://github.com/thegagankapoor/End-to-End-Kubernetes-Three-Tier-DevSecOps-Project.git'
            }
        }
        stage('Sonarqube Analysis') {
            steps {
                dir('Application-Code/backend') {
                    withSonarQubeEnv('sonar-server') {
                        sh ''' $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=backend \
                        -Dsonar.projectKey=backend '''
                    }
                }
            }
        }
        stage('Quality Check') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token' 
                }
            }
        }
        stage('OWASP Dependency-Check Scan') {
            steps {
                dir('Application-Code/backend') {
                    dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                    dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                }
            }
        }
        stage('Trivy File Scan') {
            steps {
                dir('Application-Code/backend') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }
        stage("Docker Image Build") {
            steps {
                script {
                    dir('Application-Code/backend') {
                            sh 'docker system prune -f'
                            sh 'docker container prune -f'
                            sh 'docker build -t ${AWS_ECR_REPO_NAME} .'
                    }
                }
            }
        }
        stage("ECR Image Pushing") {
            steps {
                script {
                        sh 'aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REPOSITORY_URI}'
                        sh 'docker tag ${AWS_ECR_REPO_NAME} ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}'
                        sh 'docker push ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}'
                }
            }
        }
        stage("TRIVY Image Scan") {
            steps {
                sh 'trivy image ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER} > trivyimage.txt' 
            }
        }
        stage('Checkout Code') {
            steps {
                git credentialsId: 'GITHUB', url: 'https://github.com/thegagankapoor/End-to-End-Kubernetes-Three-Tier-DevSecOps-Project.git'
            }
        }
        stage('Update Deployment file') {
            environment {
                GIT_REPO_NAME = "End-to-End-Kubernetes-Three-Tier-DevSecOps-Project"
                GIT_USER_NAME = "thegagankapoor"
            }
           steps {
    dir('Kubernetes-Manifests-file/Backend') {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
            sh '''
                git config user.email "gagankapoorr@gmail.com"
                git config user.name "thegagankapoor"
                BUILD_NUMBER=${BUILD_NUMBER}
                echo "Build Number: $BUILD_NUMBER"
                
                # Check if deployment.yaml exists
                if [ ! -f deployment.yaml ]; then
                    echo "deployment.yaml not found!"
                    ls -la
                    exit 1
                fi
                
                echo "Current deployment.yaml content:"
                cat deployment.yaml
                echo "=========================="
                
                # Set bash to not exit on command failure temporarily
                set +e
                
                # Try to extract current image tag
                imageTag=$(grep -oP "(?<=${AWS_ECR_REPO_NAME}:)[^ ,\\]]+" deployment.yaml 2>/dev/null)
                grep_exit_code=$?
                
                # Re-enable exit on error
                set -e
                
                if [ $grep_exit_code -eq 0 ] && [ -n "$imageTag" ]; then
                    echo "Found current imageTag: $imageTag"
                    # Replace specific tag
                    sed -i "s|${AWS_ECR_REPO_NAME}:${imageTag}|${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}|g" deployment.yaml
                else
                    echo "Could not find specific imageTag, doing general replacement"
                    # Replace any tag after the repo name
                    sed -i "s|${AWS_ECR_REPO_NAME}:[^[:space:]]*|${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}|g" deployment.yaml
                fi
                
                echo "Updated deployment.yaml content:"
                cat deployment.yaml
                echo "=========================="
                
                # Check if any changes were made
                if git diff --quiet deployment.yaml; then
                    echo "No changes were made to deployment.yaml"
                    echo "This might indicate the image reference wasn't found or replaced"
                    exit 1
                else
                    echo "Changes detected, committing..."
                    git add deployment.yaml
                    git commit -m "Update deployment Image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:master
                fi
            '''
        }
                }
            }
        }
    }
}
